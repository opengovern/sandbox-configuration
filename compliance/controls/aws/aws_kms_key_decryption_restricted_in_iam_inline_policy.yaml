id: aws_kms_key_decryption_restricted_in_iam_inline_policy
title: KMS key decryption should be restricted in IAM inline policy
description: Checks whether the inline policies that are embedded in your IAM identities (role, user, or group) allow the AWS KMS decryption actions on all KMS keys. This control uses Zelkova, an automated reasoning engine, to validate and warn you about policies that may grant broad access to your secrets across AWS accounts. This control fails if kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys in an inline policy.
integration_type:
  - aws_cloud_account
parameters: []
policy:
    language: sql
    primary_resource: ''
    definition: |
        WITH user_with_decrypt_grant AS (
          SELECT
            DISTINCT arn
          FROM
            aws_iam_user,
            jsonb_array_elements(inline_policies_std) AS inline_policy,
            jsonb_array_elements(inline_policy -> 'PolicyDocument' -> 'Statement') AS statement
          WHERE
            statement ->> 'Effect' = 'Allow'
            AND statement -> 'Resource' ?| ARRAY['*', 'arn:aws:kms:*:' || account_id || ':key/*', 'arn:aws:kms:*:' || account_id || ':alias/*']
            AND statement -> 'Action' ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:deencrypt*', 'kms:reencryptfrom']
        ),
        role_with_decrypt_grant AS (
          SELECT
            DISTINCT arn
          FROM
            aws_iam_role,
            jsonb_array_elements(inline_policies_std) AS inline_policy,
            jsonb_array_elements(inline_policy -> 'PolicyDocument' -> 'Statement') AS statement
          WHERE
            statement ->> 'Effect' = 'Allow'
            AND statement -> 'Resource' ?| ARRAY['*', 'arn:aws:kms:*:' || account_id || ':key/*', 'arn:aws:kms:*:' || account_id || ':alias/*']
            AND statement -> 'Action' ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:deencrypt*', 'kms:reencryptfrom']
        ),
        group_with_decrypt_grant AS (
          SELECT
            DISTINCT arn
          FROM
            aws_iam_group,
            jsonb_array_elements(inline_policies_std) AS inline_policy,
            jsonb_array_elements(inline_policy -> 'PolicyDocument' -> 'Statement') AS statement
          WHERE
            statement ->> 'Effect' = 'Allow'
            AND statement -> 'Resource' ?| ARRAY['*', 'arn:aws:kms:*:' || account_id || ':key/*', 'arn:aws:kms:*:' || account_id || ':alias/*']
            AND statement -> 'Action' ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:deencrypt*', 'kms:reencryptfrom']
        )
        SELECT
          i.arn AS resource,
          i.platform_integration_id AS platform_integration_id,
          i.platform_resource_id AS platform_resource_id,
          'aws_iam_user' AS platform_table_name,
          CASE
            WHEN d.arn IS NULL THEN 'ok'
            ELSE 'alarm'
          END AS status,
          CASE
            WHEN d.arn IS NULL THEN 'User ' || i.title || ' not allowed to perform decryption actions on all keys.'
            ELSE 'User ' || i.title || ' allowed to perform decryption actions on all keys.'
          END AS reason,
          i.account_id
        FROM
          aws_iam_user i
        LEFT JOIN user_with_decrypt_grant d ON i.arn = d.arn
        UNION
        SELECT
          r.arn AS resource,
          r.platform_integration_id AS platform_integration_id,
          r.platform_resource_id AS platform_resource_id,
          'aws_iam_role' AS platform_table_name,
          CASE
            WHEN d.arn IS NULL THEN 'ok'
            ELSE 'alarm'
          END AS status,
          CASE
            WHEN d.arn IS NULL THEN 'Role ' || r.title || ' not allowed to perform decryption actions on all keys.'
            ELSE 'Role ' || r.title || ' allowed to perform decryption actions on all keys.'
          END AS reason,
          r.account_id
        FROM
          aws_iam_role r
        LEFT JOIN role_with_decrypt_grant d ON r.arn = d.arn
        WHERE
          r.arn NOT LIKE '%service-role/%'
        UNION
        SELECT
          g.arn AS resource,
          g.platform_integration_id AS platform_integration_id,
          g.platform_resource_id AS platform_resource_id,
          'aws_iam_group' AS platform_table_name,
          CASE
            WHEN d.arn IS NULL THEN 'ok'
            ELSE 'alarm'
          END AS status,
          CASE
            WHEN d.arn IS NULL THEN 'Group ' || g.title || ' not allowed to perform decryption actions on all keys.'
            ELSE 'Group ' || g.title || ' allowed to perform decryption actions on all keys.'
          END AS reason,
          g.account_id
        FROM
          aws_iam_group g
        LEFT JOIN group_with_decrypt_grant d ON g.arn = d.arn;
severity: medium
tags:
    aws_foundational_security:
      - 'true'
    category:
      - Compliance
    foundational_security_category:
      - secure_access_management
    foundational_security_item_id:
      - kms_2
    plugin:
      - aws
    service:
      - AWS/KMS
