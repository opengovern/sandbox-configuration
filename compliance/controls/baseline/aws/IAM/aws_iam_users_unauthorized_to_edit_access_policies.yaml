id: aws_iam_users_unauthorized_to_edit_access_policies
title: IAM Users Unauthorized to Edit Access Policies
description: Ensure AWS IAM users that are not authorized to edit IAM access policies are decommissioned.
integration_type:
  - aws_cloud_account
parameters:
  - key: awsIamUsersAuthorizedToEditPolicy
    value: ''
policy:
    language: sql
    primary_resource: aws_iam_user
    definition: |
        WITH authorize_to_edit_policy AS (
            SELECT
                arn,
                (SELECT ARRAY_AGG(action) 
                 FROM jsonb_array_elements_text(s -> 'Action') AS action)
            FROM
                aws_iam_policy,
                jsonb_array_elements(policy_std -> 'Statement') AS s
            WHERE 
                ((
                    SELECT ARRAY_AGG(action) 
                    FROM jsonb_array_elements_text(s -> 'Action') AS action
                 ) @> ARRAY[
                        'iam:CreatePolicy',
                        'iam:CreatePolicyVersion',
                        'iam:DeleteGroupPolicy',
                        'iam:DeletePolicy',
                        'iam:DeletePolicyVersion',
                        'iam:DeleteRolePolicy',
                        'iam:DeleteUserPolicy',
                        'iam:DetachGroupPolicy',
                        'iam:DetachRolePolicy',
                        'iam:DetachUserPolicy',
                        'iam:PutGroupPolicy',
                        'iam:PutRolePolicy',
                        'iam:PutUserPolicy',
                        'iam:UpdateAssumeRolePolicy'
                 ]
                 AND (s ->> 'Effect') = 'Allow')
                OR (
                    (
                      SELECT ARRAY_AGG(action) 
                      FROM jsonb_array_elements_text(s -> 'Action') AS action
                    ) @> ARRAY['iam:*']
                    AND (s ->> 'Effect') = 'Allow'
                )
        )

        SELECT
            name AS resource,
            platform_integration_id,
            platform_resource_id,
            CASE
                WHEN EXISTS(
                  SELECT 1 
                  FROM jsonb_array_elements_text(attached_policy_arns) AS parn
                  LEFT JOIN authorize_to_edit_policy AS ep ON parn = ep.arn 
                  WHERE ep.arn IS NOT NULL
                ) 
                AND ('{{.awsIamUsersAuthorizedToEditPolicy}}' NOT LIKE '%' || user_id || '%')
                THEN 'alarm'
                ELSE 'ok'
            END AS status,
            CASE
                WHEN EXISTS(
                  SELECT 1 
                  FROM jsonb_array_elements_text(attached_policy_arns) AS parn
                  LEFT JOIN authorize_to_edit_policy AS ep ON parn = ep.arn 
                  WHERE ep.arn IS NOT NULL
                ) 
                AND ('{{.awsIamUsersAuthorizedToEditPolicy}}' NOT LIKE '%' || user_id || '%')
                THEN 'this iam user is not authorized to edit policies'
                ELSE 'ok'
            END AS reason,
            region, 
            account_id
        FROM
            aws_iam_user
severity: high
tags:
    platform_score_cloud_service_name:
      - AWS Identity and Access Management (IAM)
    platform_score_use_case:
      - Problem Identities
    score_service_name:
      - AWS Identity and Access Management (IAM)
    score_tags:
      - Problem Identities
